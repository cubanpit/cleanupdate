#!/bin/bash

#
# 'cleanupdate' by cubanpit at github.com
#
# Initial script found somewhere on internet (thanks to unknown).
# Menu taken from a script by Chrysostomus.
#
# This script should help you to mantain an ArchLinux-based system.
# More info at github.com/cubanpit/cleanupdate
#

BOLD=$(tput bold)
NORMAL=$(tput sgr0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
PURPLE=$(tput setaf 5)
LNG="eng"
[[ "$LANG" =~ "it_IT" ]] && LNG="ita"

function end_msg {
	mod=$1
	msg=$2
	if [[ $mod = ok ]]
	then
		[[ $LNG = ita ]] && echo "${BOLD}[${GREEN}FINITO${NORMAL}${BOLD}] $msg ${NORMAL}"
		[[ $LNG = eng ]] && echo "${BOLD}[${GREEN}DONE${NORMAL}${BOLD}] $msg ${NORMAL}"
	elif [[ $mod = no ]]
	then
		[[ $LNG = ita ]] && echo "${BOLD}[${RED}NON ESEGUITO${NORMAL}${BOLD}] $msg ${NORMAL}"
		[[ $LNG = eng ]] && echo "${BOLD}[${RED}NOT EXECUTED${NORMAL}${BOLD}] $msg ${NORMAL}"
	else
		[[ $LNG = ita ]] && echo "ERRORE: modalità sconosciuta, vedere funzione end_msg()."
		[[ $LNG = eng ]] && echo "ERROR: unknown option, see end_msg() function."
	fi
}

function qst_msg {
	mod=$1
	msg=$2
	if [[ $mod = yes ]]
	then
		[[ $LNG = ita ]] && echo -n "${BOLD}${YELLOW}>>${NORMAL}${BOLD} $msg [S/n]?${NORMAL} "
		[[ $LNG = eng ]] && echo -n "${BOLD}${YELLOW}>>${NORMAL}${BOLD} $msg [Y/n]?${NORMAL} "
	elif [[ $mod = no ]]
	then
		[[ $LNG = ita ]] && echo -n "${BOLD}${YELLOW}>>${NORMAL}${BOLD} $msg [s/N]?${NORMAL} "
		[[ $LNG = eng ]] && echo -n "${BOLD}${YELLOW}>>${NORMAL}${BOLD} $msg [y/N]?${NORMAL} "
	else
		[[ $LNG = ita ]] && echo "ERRORE: risposta predefinita sconosciuta, vedere funzione qst_msg()."
		[[ $LNG = eng ]] && echo "ERROR: unknown default answer, see qst_msg() function."
	fi
}

function sys_update {
	[[ $LNG = ita ]] && echo " ${BOLD}::Aggiornamento del sistema::${NORMAL} "
	[[ $LNG = eng ]] && echo " ${BOLD}::System update::${NORMAL} "
	echo
	[[ $LNG = ita ]] && qst_msg "yes" "Desideri aggiornare il database locale"
	[[ $LNG = eng ]] && qst_msg "yes" "Do you want to update local database"
	read -r sure
	if [[ $sure != "n" && $sure != "N" ]]
	then
		sudo pacman -Syy --color never
		[[ $LNG = ita ]] && end_msg "ok" "Aggiornamento database locale"
		[[ $LNG = eng ]] && end_msg "ok" "Local database update"
	else
		[[ $LNG = ita ]] && end_msg "no" "Aggiornamento database locale"
		[[ $LNG = eng ]] && end_msg "no" "Local database update"
	fi
	echo
	[[ $LNG = ita ]] && qst_msg "yes" "Desideri aggiornare i pacchetti ufficiali"
	[[ $LNG = eng ]] && qst_msg "yes" "Do you want to upgrade official packages"
	read -r sure
	if [[ $sure != "n" && $sure != "N" ]]
    then
    	sudo pacman -Syuu --color never
    	[[ $LNG = ita ]] && end_msg "ok" "Aggiornamento pacchetti ufficiali"
    	[[ $LNG = eng ]] && end_msg "ok" "Official packages upgrade"
	else
    	[[ $LNG = ita ]] && end_msg "no" "Aggiornamento pacchetti ufficiali"
		[[ $LNG = eng ]] && end_msg "no" "Official packages upgrade"
	fi
	echo
	[[ $LNG = ita ]] && qst_msg "yes" "Desideri aggiornare i pacchetti di AUR"
	[[ $LNG = eng ]] && qst_msg "yes" "Do you want to upgrade AUR packages"
	read -r sure
	if [[ $sure != "n" && $sure != "N" ]]
	then
		PAC=$(pacman -Qi pacaur 2> /dev/null)
		YAU=$(pacman -Qi yaourt 2> /dev/null)
		if [[ -n $PAC ]]
		then
			pacaur -Sua
			[[ $LNG = ita ]] && end_msg "ok" "Aggiornamento AUR"
			[[ $LNG = eng ]] && end_msg "ok" "AUR upgrade"
		elif [[ -n $YAU ]]
		then
			yaourt -Sua --nocolor
			[[ $LNG = ita ]] && end_msg "ok" "Aggiornamento AUR"
			[[ $LNG = eng ]] && end_msg "ok" "AUR upgrade"
		else
			[[ $LNG = ita ]] && echo "Non risulta installato né 'yaourt' né 'pacaur',"\
				"non è possibile accedere agli aggiornamenti AUR tramite questo script."
			[[ $LNG = eng ]] && echo "You don't have neither 'yaourt' nor 'pacaur' installed,"\
				"you can't access AUR updates through this script."
			echo
			[[ $LNG = ita ]] && end_msg "no" "Aggiornamento AUR"
			[[ $LNG = eng ]] && end_msg "no" "AUR upgrade"
		fi
	else
		[[ $LNG = ita ]] && end_msg "no" "Aggiornamento AUR"
		[[ $LNG = eng ]] && end_msg "no" "AUR upgrade"
	fi
}

function clean_pkg {
	[[ $LNG = ita ]] && echo " ${BOLD}::Pulizia pacchetti::${NORMAL} "
	[[ $LNG = eng ]] && echo " ${BOLD}::Clean packages::${NORMAL} "
	echo
	[[ $LNG = ita ]] && qst_msg "no" "Desideri cercare pacchetti orfani?"
	[[ $LNG = eng ]] && qst_msg "no" "Do you want search for orphaned packages"
	read -r sure
	if [[ ( $LNG = eng && ( $sure = y || $sure = Y ) ) || \
		  ( $LNG = ita && ( $sure = s || $sure = S ) ) ]]
    then
		ORP=$(pacman -Qdtq)
		if [[ -n $ORP ]]
		then
			sudo pacman --color never -Rs $ORP
		else
			[[ $LNG = ita ]] && echo "Non è presente alcun pacchetto orfano."
			[[ $LNG = eng ]] && echo "There isn't any orphaned packages."
		fi
		[[ $LNG = ita ]] && end_msg "ok" "Pacchetti orfani"
		[[ $LNG = eng ]] && end_msg "ok" "Orphaned packages"
	else
		[[ $LNG = ita ]] && end_msg "no" "Pacchetti orfani"
		[[ $LNG = eng ]] && end_msg "no" "Orphaned packages"
	fi
	echo
	[[ $LNG = ita ]] && qst_msg "yes" "Desideri pulire la cache dei pacchetti installati (conservando le ultime 2 versioni)"
	[[ $LNG = eng ]] && qst_msg "yes" "Do you want to clean the cache of installed packages (keeping 2 versions)"
	read -r sure
	if [[ $sure != "n" && $sure != "N" ]]
    then
    	sudo paccache -rk2 --nocolor
    	[[ $LNG = ita ]] && end_msg "ok" "Pulizia cache pacchetti installati"
    	[[ $LNG = eng ]] && end_msg "ok" "Installed packages cache clean"
	else
    	[[ $LNG = ita ]] && end_msg "no" "Pulizia cache pacchetti installati"
		[[ $LNG = eng ]] && end_msg "no" "Installed packages cache clean"
	fi
	echo
	[[ $LNG = ita ]] && qst_msg "yes" "Desideri pulire completamente la cache dei pacchetti non installati"
	[[ $LNG = eng ]] && qst_msg "yes" "Do you want to completely clean the cache of uninstalled packages"
	read -r sure
	if [[ $sure != "n" && $sure != "N" ]]
    then
    	sudo paccache -ruk0 --nocolor
    	[[ $LNG = ita ]] && end_msg "ok" "Pulizia cache pacchetti non installati"
    	[[ $LNG = eng ]] && end_msg "ok" "Uninstalled packages cache clean"
	else
    	[[ $LNG = ita ]] && end_msg "no" "Pulizia cache pacchetti non installati"
		[[ $LNG = eng ]] && end_msg "no" "Uninstalled packages cache clean"
	fi
	echo
	[[ $LNG = ita ]] && qst_msg "no" "Desideri ottimizzare (deframmentare) il database di pacaman (NO SSD)"
	[[ $LNG = eng ]] && qst_msg "no" "Do you want to optimize (defragment) pacman database (NO SSD)"
	read -r sure
	if [[ ( $LNG = eng && ( $sure = y || $sure = Y ) ) || \
		  ( $LNG = ita && ( $sure = s || $sure = S ) ) ]]
    then
    	sudo pacman-optimize --nocolor
    	[[ $LNG = ita ]] && end_msg "ok" "Ottimizzazione database"
    	[[ $LNG = eng ]] && end_msg "ok" "Database optimization"
	else
    	[[ $LNG = ita ]] && end_msg "no" "Ottimizzazione database"
		[[ $LNG = eng ]] && end_msg "no" "Database optimization"
	fi
}

function clean_file {
	[[ $LNG = ita ]] && echo " ${BOLD}::Pulizia file::${NORMAL} "
	[[ $LNG = eng ]] && echo " ${BOLD}::Clean files::${NORMAL} "
	echo
	[[ $LNG = ita ]] && qst_msg "no" "Desideri rimuovere ogni file in /tmp"
	[[ $LNG = eng ]] && qst_msg "no" "Do you want to clean every /tmp files"
	read -r sure
	if [[ ( $LNG = eng && ( $sure = y || $sure = Y ) ) || \
		  ( $LNG = ita && ( $sure = s || $sure = S ) ) ]]
    then
    	sudo rm -rf /tmp/*
    	[[ $LNG = ita ]] && end_msg "ok" "Pulizia file temporanei"
    	[[ $LNG = eng ]] && end_msg "ok" "Tmp files clean"
	else
		[[ $LNG = ita ]] && end_msg "no" "Pulizia file temporanei"
		[[ $LNG = eng ]] && end_msg "no" "Tmp files clean"
	fi
	echo
	[[ $LNG = ita ]] && qst_msg "yes" "Desideri rimuovere i file poco recenti dalla cache e dalle miniature"
	[[ $LNG = eng ]] && qst_msg "yes" "Do you want to clean old cache and thumbnails"
	read -r sure
	if [[ $sure != "n" && $sure != "N" ]]
   	then
   		find ~/.thumbnails -type f -atime +30 -print0 | xargs -0 /bin/rm -f
		find ~/.cache -type f -atime +30 -print0 | xargs -0 /bin/rm -f
   		[[ $LNG = ita ]] && end_msg "ok" "Pulizia cache e miniature"
   		[[ $LNG = eng ]] && end_msg "ok" "Thumbs and cache clean"
	else
   		[[ $LNG = ita ]] && end_msg "no" "Pulizia cache e miniature"
		[[ $LNG = eng ]] && end_msg "no" "Thumbs and cache clean"
	fi
	echo
	[[ $LNG = ita ]] && qst_msg "yes" "Desideri cercare file residui"
	[[ $LNG = eng ]] && qst_msg "yes" "Do you want to search for residual files"
	read -r sure
	if [[ $sure != "n" && $sure != "N" ]]
    then
    	RES="$(find "$HOME" -name "Desktop.ini")$(find "$HOME" -name "*~")$(find "$HOME" -name "Thumbs.db")"
		if [[ -n $RES ]]
		then
			find "$HOME" -name "*~"
    		find "$HOME" -name "Desktop.ini"
    		find "$HOME" -name "Thumbs.db"
    		[[ $LNG = ita ]] && qst_msg "no" "Desideri rimuovere questi file"
    		[[ $LNG = eng ]] && qst_msg "no" "Do you want to remove these files"
    		read -r sure
			if [[ ( $LNG = eng && ( $sure = y || $sure = Y ) ) || \
			  ( $LNG = ita && ( $sure = s || $sure = S ) ) ]]
        	then
        		find "$HOME" -name "*~" -print0 | xargs -0 /bin/rm -f
        		find "$HOME" -name "Desktop.ini" -print0 | xargs -0 /bin/rm -f
        		find "$HOME" -name "Thumbs.db" -print0 | xargs -0 /bin/rm -f
        		[[ $LNG = ita ]] && end_msg "ok" "Pulizia file residui"
        		[[ $LNG = eng ]] && end_msg "ok" "Residual files clean"
    		else
        		[[ $LNG = ita ]] && end_msg "no" "Pulizia file residui"
				[[ $LNG = eng ]] && end_msg "no" "Residual files clean"
    		fi
		else
			[[ $LNG = ita ]] && echo "Non sono presenti file residui."
			[[ $LNG = eng ]] && echo "There are no residual files."
        	[[ $LNG = ita ]] && end_msg "ok" "Pulizia file residui"
        	[[ $LNG = eng ]] && end_msg "ok" "Residual files clean"
		fi
	else
		[[ $LNG = ita ]] && end_msg "no" "Pulizia file residui"
		[[ $LNG = eng ]] && end_msg "no" "Residual files search"
	fi
	echo
	[[ $LNG = ita ]] && qst_msg "no" "Desideri svuotare il cestino"
	[[ $LNG = eng ]] && qst_msg "no" "Do you want to clean trash"
	read -r sure
	if [[ ( $LNG = eng && ( $sure = y || $sure = Y ) ) || \
		  ( $LNG = ita && ( $sure = s || $sure = S ) ) ]]
    then
    	sudo rm -rfv ~/.local/share/Trash/*
    	[[ $LNG = ita ]] && end_msg "ok" "Pulizia cestino"
    	[[ $LNG = eng ]] && end_msg "ok" "Trash clean"
	else
    	[[ $LNG = ita ]] && end_msg "no" "Pulizia cestino"
		[[ $LNG = eng ]] && end_msg "no" "Trash clean"
	fi
}

function doc_eng {
less -R << EOF
Press 'q' to quit documentation

${BOLD}${YELLOW}::Update system::${NORMAL}

${BOLD}Update local database (pacman -Syy)${NORMAL}
Sync local database with online repositories, force the sync also if local database seems up to date. Repositories are configured in '/etc/pacman.conf'.

${BOLD}Update packages from repositories (pacman -Syuu)${NORMAL}
Check that local database is up to date with online repositories, check packages version between database and installed packages, if versions are different runs update or downgrade.

${BOLD}Update packages from AUR (yaourt -Sua)${NORMAL}
Update packages from AUR repository, if needed. It can use different tools for that: 'pacaur' or 'yaourt'.

${BOLD}${YELLOW}::Clean packages::${NORMAL}

${BOLD}Search and uninstall orphaned packages (pacman -Qdtq)${NORMAL}
Search for packages installed as dependencies and no longer required, if there are some it asks before unistalling them.

${BOLD}Clean the cache of installed packages (paccache -rk2)${NORMAL}
By default pacman keeps forever a backup of every version of every installed package, this backups can grow and fill the hard disk, so it must be cleaned sometimes. This command removes all backups for all installed packages keeping only two version, just in case it is necessary to perform a downgrade.

${BOLD}Clean the cache of uninstalled packages (paccache -ruk0)${NORMAL}
See previous command explanation. This works with unisnstalled packages and doesn't keep any backup version.

${BOLD}Optimize (defragment) pacman database (NO SSD) (pacman-optimize)${NORMAL}
This command simply optimize access to pacman database, defragmenting it. For SSD it doesn't change anything in performances and it does a lot of writes, so it's not recommended.

${BOLD}${YELLOW}::Clean files::${NORMAL}

${BOLD}Clean temp files (rm -fr /tmp/*)${NORMAL}
All files in '/tmp' will be deleted, so it's a good choiche to close all applications before executing it. It's not recommended by default, because is useful in few cases, like big AUR compile files or big downloads from browser.

${BOLD}Clean old cache and thumbnail files${NORMAL}
Search in '~/.cache' and '~/.thumbnails' for files with last access more than 30 days ago and delete them. Cache and thumbnail files are not necessary and are used by user applications to load faster images thumbnails or informations.

${BOLD}Search and clean residual files${NORMAL}
Search for files with names matching 'Thumbs.db', 'Desktop.ini' and '*~'. This files are temporary files from Windows (first and second one) and from Linux (last one) application, that store them to save some informations during work; they're important when you're using some applications, but they should disappears few seconds later, sometimes they don't.

${BOLD}Clean trash files (rm -rfv ~/.local/share/Trash/*)${NORMAL}
Simply clean the user trash, printing all file names so the user at first glance can check deleted files and their number.

Press 'q' to quit documentation
EOF
}

function doc_ita {
less -R << EOF
Premere 'q' per uscire dalla documentazione

${BOLD}${YELLOW}::Aggiornamento del sistema::${NORMAL}

${BOLD}Aggiornamento del database locale (pacman -Syy)${NORMAL}
Sincronizza il database locale di pacman con i repository online, in particolare forza la sincronizzazione effettuandola anche se il database locale risulta aggiornato. I repository possono essere aggiunti e configurati nel file '/etc/pacman.conf'.

${BOLD}Aggiornamento dei pacchetti dai repository ufficiali (pacman -Syuu)${NORMAL}
Controlla che il database locale sia aggiornato, se ci sono differenze tra le versioni dei pacchetti installati e di quelli presenti nel database effettua l'upgrade (innalzamento di versione) o il downgrade (abbassamento di versione).

${BOLD}Aggiornamento dei pacchetti di AUR (pacaur -Sua || yaourt -Sua)${NORMAL}
Effettua l'aggiornamento dei pacchetti provenienti dai repository AUR, se necessario. Può utilizzare come strumenti (in ordine di priorità) 'pacaur' oppure 'yaourt'.

${BOLD}${YELLOW}::Pulizia pacchetti::${NORMAL}

${BOLD}Ricerca e rimozione dei pacchetti orfani (pacman -Qdtq)${NORMAL}
Effettua una ricerca dei pacchetti orfani, cioè quelli installati come dipendenza di un altro pacchetto attualmente non più installato sul sistema, o le cui dipendenze sono state modificate.

${BOLD}Pulizia della cache dei pacchetti installati (paccache -rk2)${NORMAL}
Elimina le vecchie versioni dei pacchetti installati che pacman tiene come backup, lasciando le ultime due versioni. Il gestore di pacchetti pacman come comportamento predefinito tiene tutte le vecchie versioni dei pacchetti installati (e non), questo utilissimo backup può occupare col tempo molta memoria. È quindi consigliabile ripulire saltuariamente la cache dei pacchetti, lasciando solo le ultime versioni dei pacchetti, che possono risultare utili in caso di necessità di downgrade (installazione della versione precedente di un pacchetto).

${BOLD}Pulizia della cache dei pacchetti non installati (paccache -ruk0)${NORMAL}
Come la voce precedente, ma per i pacchetti non più installati sul sistema. Non essendoci necessità di effettuare downgrade non conserva neanche una versione di backup.

${BOLD}Ottimizzazione (deframmentazione) del database di pacman (NO SSD) (pacman-optimize)${NORMAL}
Ottimizza l'accesso al database di pacman, deframmentandolo. Non è un'ottimizzazione utile nel caso in cui si utilizzi un SSD a causa del funzionamento stesso dei dischi a stato solido, inoltre causa inutili scritture sul disco che nel caso degli SSD sarebbe meglio limitare se non necessarie.

${BOLD}${YELLOW}::Pulizia file::${NORMAL}

${BOLD}Pulizia file temporanei (rm -fr /tmp/*)${NORMAL}
Rimuove tutti i file presenti nella cartella di sistema '/tmp'. È consigliabile chiudere ogni applicazione prima di procedere con questa operazione. Può essere utile nel caso di sistemi con scarsa memoria RAM sui quali la stessa viene in parte saturata da download o prodotti della compilazione di pacchetti AUR. Sconsigliato e inutile per la manutenzione ordinaria del sistema.

${BOLD}Pulizia cache e miniature non recenti${NORMAL}
Ricerca file nelle cartelle '~/.cache' e '~/.thumbnails' file con l'ultimo accesso risalente a più di 30 giorni prima e li cancella. I file presenti in cache sono utilizzati dalle applicazioni per velocizzare alcune operazioni comuni (es. caricamento copertine album in un riproduttore multimediale), invece i thumbnails sono le miniature delle immagini che vengono utilizzate (es. dal gestore file) per caricare più velocemente le anteprime delle immagini presenti nel sistema.

${BOLD}Ricerca e rimozione file residui${NORMAL}
Effettua una ricerca sui file che si chiamano 'Thumbs.db', 'Desktop.ini' e '*~'. I primi due soo file creati dai sistemi Windows ed inutili su di un sistema Linux, che possono comparire se si condividono alcune cartelle con il sistema operativo di casa Microsoft. L'ultimo tipo di file (con il nome che finisce con una tilde) è un tipo di file temporaneo creato da molte applicazioni come salvataggio temporaneo del lavoro in corso di svolgimento, utile nel caso in cui improvvisamente il sistema si spenga per esempio.

${BOLD}Pulizia cestino (rm -rfv ~/.local/share/Trash/*)${NORMAL}
Cancella tutti i file presenti nel cestino dell'utente, stampando tutti i file cancellati di modo che l'utente possa verificare velocemente l'entità dell'operazione.

Premere 'q' per uscire dalla documentazione
EOF
}

function main {
	while true; do
	clear
	echo
	echo "      _                                  _       _        "
	echo "  ___| | ___  __ _ _ __  _   _ _ __   __| | __ _| |_ ___  "
	echo " / __| |/ _ \/ _\` | '_ \| | | | '_ \ / _\` |/ _\` | __/ _ \ "
	echo "| (__| |  __/ (_| | | | | |_| | |_) | (_| | (_| | ||  __/ "
	echo " \___|_|\___|\__,_|_| |_|\__,_| .__/ \__,_|\__,_|\__\___| "
	echo "                              |_|                         "
	echo
	if [[ $LNG = ita ]]
	then
		echo " ┌────────────────────────────────────────┐"
		echo " │    1.  Aggiorna e pulisci tutto        │"
		echo " │    2.  Aggiorna il sistema             │"
		echo " │    3.  Pulisci i pacchetti             │"
		echo " │    4.  Pulisci i file                  │"
		echo " │                                        │"
		echo " │    8.  Spiega le opzioni               │"
		echo " │    9.  Cambia lingua (eng|${BOLD}ita${NORMAL})         │"
		echo " │    0.  ESCI                            │"
		echo " └────────────────────────────────────────┘"
		echo
		echo -n " Seleziona un'opzione : "
	else
		echo " ┌────────────────────────────────────────┐"
		echo " │    1.  Update and clean everything     │"
		echo " │    2.  Update system                   │"
		echo " │    3.  Clean packages                  │"
		echo " │    4.  Clean files                     │"
		echo " │                                        │"
		echo " │    8.  Explain options                 │"
		echo " │    9.  Change language (${BOLD}eng${NORMAL}|ita)       │"
		echo " │    0.  QUIT                            │"
		echo " └────────────────────────────────────────┘"
		echo
		echo -n " Select an option : "
	fi
	read -rs -n1 ans
	case $ans in
		1)
			clear
			sys_update
			echo
			clean_pkg
			echo
			clean_file
			echo
			[[ $LNG = ita ]] && echo "Finito! Premi un tasto qualsiasi per continuare. "
			[[ $LNG = eng ]] && echo "Finished! Press any key to continue. "
			read -rs -n1
			;;
		2)
			clear
			sys_update
			echo
			[[ $LNG = ita ]] && echo "Finito! Premi un tasto qualsiasi per continuare. "
			[[ $LNG = eng ]] && echo "Finished! Press any key to continue. "
			read -rs -n1
			;;
		3)
			clear
			clean_pkg
			echo
			[[ $LNG = ita ]] && echo "Finito! Premi un tasto qualsiasi per continuare. "
			[[ $LNG = eng ]] && echo "Finished! Press any key to continue. "
			read -rs -n1
			;;
		4)
			clear
			clean_file
			echo
			[[ $LNG = ita ]] && echo "Finito! Premi un tasto qualsiasi per continuare. "
			[[ $LNG = eng ]] && echo "Finished! Press any key to continue. "
			read -rs -n1
			;;
		8)
			clear
			[[ $LNG = ita ]] && doc_ita
			[[ $LNG = eng ]] && doc_eng
			;;
		9)
			[[ $LNG = eng ]] && LNG="ita" || LNG="eng"
			;;
		0)
			clear && exit 0
			;;
		*)
			echo
			echo
			[[ $LNG = ita ]] && echo -n " Non esiste l'opzione '$ans'. Premi un tasto qualsiasi per continuare. "
			[[ $LNG = eng ]] && echo -n " There is no '$ans' option. Press any key to continue. "
			read -rs -n1
			;;
	esac
	done
}

main

exit 1
