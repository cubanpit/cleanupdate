#!/bin/bash

#
# 'cleanupdate' by cubanpit at github.com
#
# Initial script found somewhere on internet (thanks to unknown).
# Menu taken from a script by Chrysostomus.
#
# This script should help you to mantain an ArchLinux-based system.
#
# Features:
# - update local database; (pacman -Syy)
# - update packages from repositories; (pacman -Syu)
# - update packages from AUR; (yaourt -Sua)
# - search and uninstall orphaned packages; (pacman -Rs $(pacman -Qdtq))
# - clean the cache of installed packages; (paccache -rk2)
# - clean the cache of uninstalled packages; (paccache -ruk0)
# - optimize (defragment) pacman database (NO SSD); (pacman-optimize)
# - clean temp file; (rm -fr /tmp/*)
# - clean old cache and thumbnail files;
# - search and clean residual files;
# - clean trash files; (rm -rfv ~/.local/share/Trash/*)
#
# Enjoy it!
#

bold_txt=$(tput bold)
normal_txt=$(tput sgr0)

function sys_update {
	echo " ${bold_txt}::System update::${normal_txt} "
	echo
	echo -n "# Do you want to update local database [Y/n]? "
	read sure
	if [[ $sure != "n" && $sure != "N" ]]
	then
		sudo pacman -Syy --color never
		echo "* Local database update ...[OK]"
	else echo "* Local database update ...[NOT EXECUTED]"
	fi
	echo
	echo -n "# Do you want to upgrade official packages [Y/n]? "
	read sure
	if [[ $sure != "n" && $sure != "N" ]]
    then
    	sudo pacman -Syu --color never
    	echo "* Official packages upgrade ...[OK]"
	else echo "* Official packages upgrade ...[NOT EXECUTED]"
	fi
	echo
	echo -n "# Do you want to upgrade AUR packages [Y/n]? "
	read sure
	if [[ $sure != "n" && $sure != "N" ]]
	then
		PAC=$(pacman -Qi pacaur 2> /dev/null)
		YAU=$(pacman -Qi yaourt 2> /dev/null)
		if [[ -n $PAC ]]
		then
			pacaur -Sua
		echo "* AUR upgrade ...[OK]"
		elif [[ -n $YAU ]]
		then
			yaourt -Sua --nocolor
			echo "* AUR upgrade ...[OK]"
		else
			echo "You don't have neither 'yaourt' nor 'pacaur' installed,"\
				"you can't access AUR updates through this script."
			echo
			echo "* AUR upgrade ...[NOT EXECUTED]"
		fi
	else echo "* AUR upgrade ...[NOT EXECUTED]"
	fi
}

function clean_pkg {
	echo " ${bold_txt}::Clean packages::${normal_txt} "
	echo
	echo -n "# Do you want search for orphaned packages [y/N]? "
	read sure
	if [[ $sure = "y" || $sure = "Y" ]]
    then
		ORP=$(pacman -Qdtq)
		if [[ -n $ORP ]]
		then
			sudo pacman --color never -Rs $ORP
		else
			echo "There isn't any orphaned packages."
		fi
		echo "* Orphaned packages ...[OK]"
	else echo "* Orphaned packages ...[NOT EXECUTED]"
	fi
	echo
	echo -n "# Do you want to clean the cache of installed packages (keeping 2"\
		"versions) [Y/n]? "
	read sure
	if [[ $sure != "n" && $sure != "N" ]]
    then
    	sudo paccache -rk2 --nocolor
    	echo "* Installed pkgs cache clean ...[OK]"
	else echo "* Installed pkgs ache clean ...[NOT EXECUTED]"
	fi
	echo
	echo -n "# Do you want to completely clean the cache of uninstalled packages"\
		"[Y/n]? "
	read sure
	if [[ $sure != "n" && $sure != "N" ]]
    then
    	sudo paccache -ruk0 --nocolor
    	echo "* Uninstalled pkgs cache clean ...[OK]"
	else echo "* Uninstalled pkgs cache clean ...[NOT EXECUTED]"
	fi
	echo
	echo -n "# Do you want to optimize (defragment) pacman database (NO SSD)"\
		"[y/N]? "
	read sure
	if [[ $sure = "y" || $sure = "Y" ]]
    then
    	sudo pacman-optimize --nocolor
    	echo "* Database optimization ...[OK]"
	else echo "* Database optimization ...[NOT EXECUTED]"
	fi
}

function clean_file {
	echo " ${bold_txt}::Clean files::${normal_txt} "
	echo
	echo -n "# Do you want to clean every /tmp files [y/N]? "
	read sure
	if [[ $sure = "y" || $sure = "Y" ]]
    then
    	sudo rm -rf /tmp/*
    	echo "* Tmp files clean ...[OK]"
	else echo "* Tmp files clean ...[NOT EXECUTED]"
	fi
	echo
	echo -n "# Do you want to clean old cache and thumbnails [Y/n]? "
	read sure
	if [[ $sure != "n" && $sure != "N" ]]
   	then
   		find ~/.thumbnails -type f -atime +30 -print0 | xargs -0 /bin/rm -f
		find ~/.cache -type f -atime +30 -print0 | xargs -0 /bin/rm -f
   		echo "* Thumbs and cache clean ...[OK]"
	else echo "* Thumbs and cache clean ...[NOT EXECUTED]"
	fi
	echo
	echo -n "# Do you want to search for residual files [Y/n]? "
	read sure
	if [[ $sure != "n" && $sure != "N" ]]
    then
    	find $HOME -name "*~"
    	find $HOME -name "Desktop.ini"
    	find $HOME -name "Thumbs.db"
    	echo -n "# Do you want to remove these files [y/N]? "
    	read sure
    	if [[ $sure = "y" || $sure = "Y" ]]
        then
        	find $HOME -name "*~" -print0 | xargs -0 /bin/rm -f
        	find $HOME -name "Desktop.ini" -print0 | xargs -0 /bin/rm -f
        	find $HOME -name "Thumbs.db" -print0 | xargs -0 /bin/rm -f
        	echo "* Residual files clean ...[OK]"
    	else echo "* Residual files clean ...[NOT EXECUTED]"
    	fi
	else echo "* Residual files search ...[NOT EXECUTED]"
	fi
	echo
	echo -n "# Do you want to clean trash [y/N]? "
	read sure
	if [[ $sure = "y" || $sure = "Y" ]]
    then
    	sudo rm -rfv ~/.local/share/Trash/*
    	echo "* Trash clean ...[OK]"
	else echo "* Trash clean ...[NOT EXECUTED]"
	fi
}

function doc_eng {
less -R << EOF
Press 'q' to quit documentation

 ${bold_txt}::Update system::${normal_txt}
 - update local database; (pacman -Syy)
 - update packages from repositories; (pacman -Syu)
 - update packages from AUR; (yaourt -Sua)

 ${bold_txt}::Clean packages::${normal_txt}
 - search and uninstall orphaned packages; (pacman -Rs $(pacman -Qdtq))
 - clean the cache of installed packages; (paccache -rk2)
 - clean the cache of uninstalled packages; (paccache -ruk0)
 - optimize (defragment) pacman database (NO SSD); (pacman-optimize)

 ${bold_txt}::Clean files::${normal_txt}
 - clean temp files; (rm -fr /tmp/*)
 - clean old cache and thumbnail files;
 - search and clean residual files;
 - clean trash files; (rm -rfv ~/.local/share/Trash/*)

Press 'q' to quit documentation
EOF
}

function main {
	while true; do
	clear
	echo
	echo "      _                                  _       _        "
	echo "  ___| | ___  __ _ _ __  _   _ _ __   __| | __ _| |_ ___  "
	echo " / __| |/ _ \/ _\` | '_ \| | | | '_ \ / _\` |/ _\` | __/ _ \ "
	echo "| (__| |  __/ (_| | | | | |_| | |_) | (_| | (_| | ||  __/ "
	echo " \___|_|\___|\__,_|_| |_|\__,_| .__/ \__,_|\__,_|\__\___| "
	echo "                              |_|                         "
#echo
#echo " ${bold_txt}::Clean and update system::${normal_txt}       "
	echo
	echo " ┌────────────────────────────────────────┐"
	echo " │    1.  Update and clean everything     │"
	echo " │    2.  Update system                   │"
	echo " │    3.  Clean packages                  │"
	echo " │    4.  Clean files                     │"
	echo " │                                        │"
	echo " │    9.  Explain options                 │"
	echo " │    0.  Quit                            │"
	echo " └────────────────────────────────────────┘"
	echo
	echo -n " Select an option : "
	read -s -n1 ans
	case $ans in
		1)
			clear
			sys_update
			echo
			clean_pkg
			echo
			clean_file
			echo
			echo "Finished! Press any key to continue."
			read -s -n1
			;;
		2)
			clear
			sys_update
			echo
			echo "Finished! Press any key to continue."
			read -s -n1
			;;
		3)
			clear
			clean_pkg
			echo
			echo "Finished! Press any key to continue."
			read -s -n1
			;;
		4)
			clear
			clean_file
			echo
			echo "Finished! Press any key to continue."
			read -s -n1
			;;
		9)
			clear
			doc_eng
			;;
		0)
			clear && exit 0
			;;
		*)
			echo
			echo
			echo -n " There is no '$ans' option. Press any key to continue. "
			read -s -n1
			;;
	esac
	done
}

main

exit 1
